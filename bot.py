import asyncio
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import feedparser
import httpx
import nest_asyncio

logging.basicConfig(level=logging.INFO)

TOKEN = "7918379447:AAGtVZXrnC5FJi8S3wPeXCyl_xaiFPgoVzg"
CHAT_ID = 754867580  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π chat_id

# --- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞: –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ---
NEWS_SOURCES = {
    "oil": "https://oilprice.com/rss/main",
    "middle_east": "https://www.aljazeera.com/xml/rss/all.xml",
    "markets": "https://www.investing.com/rss/news_285.rss",
}

KEYWORDS = [
    "houthi", "hezbollah", "israel", "iran", "red sea", "gaza", "opec",
    "strait of hormuz", "suez", "missile", "airstrike", "crude", "sanction",
    "gold", "silver", "platinum", "dollar index", "dxy", "inflation", "pln", "eur", "usd"
]

async def fetch_news_summary():
    summary = []
    for name, url in NEWS_SOURCES.items():
        feed = feedparser.parse(url)
        for entry in feed.entries[:10]:
            title = entry.title.lower()
            if any(keyword in title for keyword in KEYWORDS):
                summary.append(f"‚Ä¢ {entry.title.strip()}")
    return "\n".join(summary[:20]) if summary else "–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–µ–º–∞–º."

async def send_briefing(app):
    logging.info("‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏")
    try:
        summary = await fetch_news_summary()
        today = datetime.now().strftime("%d.%m.%Y")
        message = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ ({today}):\n\n{summary}"
        await app.bot.send_message(chat_id=CHAT_ID, text=message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ UTC –ø—Ä–∏—Å—ã–ª–∞—é —Å–≤–æ–¥–∫—É –ø–æ –Ω–µ—Ñ—Ç–∏, –ë–ª–∏–∂–Ω–µ–º—É –í–æ—Å—Ç–æ–∫—É –∏ –≤–∞–ª—é—Ç–∞–º.\n\n–ù–∞–ø–∏—à–∏ /briefing —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –≤—Ä—É—á–Ω—É—é.")

async def briefing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    summary = await fetch_news_summary()
    today = datetime.now().strftime("%d.%m.%Y")
    await update.message.reply_text(f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ ({today}):\n\n{summary}")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("briefing", briefing))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: asyncio.create_task(send_briefing(app)), CronTrigger(hour=9, minute=0))
    scheduler.start()

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
