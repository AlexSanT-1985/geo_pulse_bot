import asyncio
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import feedparser
import httpx
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
import nest_asyncio
import os

nest_asyncio.apply()

TOKEN = os.getenv("BOT_TOKEN")  # –ò–ª–∏ –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
CHAT_ID = os.getenv("CHAT_ID")  # –ò–ª–∏ –∑–∞–º–µ–Ω–∏ –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å chat_id
TIMEZONE = "Europe/Warsaw"

RSS_FEEDS = [
    "https://www.reutersagency.com/feed/?best-topics=top-news",
    "https://feeds.bbci.co.uk/news/world/rss.xml",
    "https://www.marketwatch.com/rss/topstories"
]

async def fetch_news():
    news = []
    for url in RSS_FEEDS:
        feed = feedparser.parse(url)
        for entry in feed.entries[:3]:  # –ø–µ—Ä–≤—ã–µ 3 —Å—Ç–∞—Ç—å–∏
            news.append(f"üì∞ <b>{entry.title}</b>\n{entry.link}")
    return "\n\n".join(news[:9])  # –º–∞–∫—Å–∏–º—É–º 9 –Ω–æ–≤–æ—Å—Ç–µ–π

async def fetch_metals():
    try:
        async with httpx.AsyncClient() as client:
            res = await client.get("https://api.metals.live/v1/spot")
            data = res.json()[0]
            return (
                "üìà <b>–ú–µ—Ç–∞–ª–ª—ã (USD/oz):</b>\n"
                f"‚Ä¢ –ó–æ–ª–æ—Ç–æ: {data.get('gold', '‚Äî')}\n"
                f"‚Ä¢ –°–µ—Ä–µ–±—Ä–æ: {data.get('silver', '‚Äî')}\n"
                f"‚Ä¢ –ü–ª–∞—Ç–∏–Ω–∞: {data.get('platinum', '‚Äî')}\n"
                f"‚Ä¢ –ü–∞–ª–ª–∞–¥–∏–π: {data.get('palladium', '‚Äî')}"
            )
    except Exception as e:
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Ç–∞–ª–ª–∞–º: {e}"

async def send_briefing(bot: Bot):
    news = await fetch_news()
    metals = await fetch_metals()
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    message = f"<b>üóì –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ ‚Äî {now}</b>\n\n{metals}\n\n{news}"
    await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="HTML")

async def emergency_check(bot: Bot):
    await bot.send_message(chat_id=CHAT_ID, text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø—Ä–æ–≤–µ—Ä–∫–∞ 30 –º–∏–Ω)", parse_mode="HTML")

async def update_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é...", parse_mode="HTML")
    await send_briefing(context.bot)

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ getUpdates-—Å–µ—Å—Å–∏–∏
    await app.bot.delete_webhook(drop_pending_updates=True)

    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(lambda: asyncio.create_task(send_briefing(app.bot)), CronTrigger(hour=9, minute=0))
    scheduler.add_job(lambda: asyncio.create_task(emergency_check(app.bot)), CronTrigger(minute="*/30"))
    scheduler.start()

    app.add_handler(CommandHandler("update", update_command))
    print("‚úÖ Bot is running...")

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
