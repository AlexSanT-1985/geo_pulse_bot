import asyncio
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import httpx

logging.basicConfig(level=logging.INFO)

# --- –¢–æ–∫–µ–Ω –∏ —á–∞—Ç ---
TOKEN = "7918379447:AAGtVZXrnC5FJi8S3wPeXCyl_xaiFPgoVzg"
CHAT_ID = -1002246849121  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π Telegram chat_id

# --- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π ---
NEWS_SOURCES = {
    "oil": "https://oilprice.com/rss/main",
    "middle_east": "https://www.aljazeera.com/xml/rss/all.xml",
    "markets": "https://www.investing.com/rss/news_285.rss",
}

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ---
KEYWORDS = [
    "houthi", "hezbollah", "israel", "iran", "red sea", "gaza",
    "opec", "strait of hormuz", "suez", "missile", "airstrike",
    "crude", "sanction", "gold", "silver", "platinum",
    "dollar index", "dxy", "inflation", "usd", "eur", "pln"
]

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π ---
async def fetch_news_summary():
    import feedparser
    summary = []

    for name, url in NEWS_SOURCES.items():
        feed = feedparser.parse(url)
        for entry in feed.entries[:10]:
            title = entry.title.lower()
            if any(keyword in title for keyword in KEYWORDS):
                summary.append(f"‚Ä¢ {entry.title.strip()}")

    if not summary:
        return "–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–µ–º–∞–º."
    return "\n".join(summary[:20])

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ ---
async def send_briefing(context: ContextTypes.DEFAULT_TYPE):
    logging.info("‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏")
    try:
        summary = await fetch_news_summary()
        today = datetime.now().strftime("%d.%m.%Y")
        message = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ ({today}):\n\n{summary}"
        await context.bot.send_message(chat_id=CHAT_ID, text=message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏: {e}")

# --- –ö–æ–º–∞–Ω–¥—ã Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–≤–æ–¥–∫–∏. –ü—Ä–∏—Å—ã–ª–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–µ—Ñ—Ç–∏, –≤–∞–ª—é—Ç–∞–º –∏ –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–µ.")

async def briefing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    summary = await fetch_news_summary()
    today = datetime.now().strftime("%d.%m.%Y")
    await update.message.reply_text(f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ ({today}):\n\n{summary}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("briefing", briefing))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_briefing, CronTrigger(hour=9, minute=0), kwargs={"context": type("obj", (object,), {"bot": app.bot})()})
    scheduler.start()

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    await app.run_polling()

async def chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"Chat ID: {update.effective_chat.id}")

app.add_handler(CommandHandler("id", chat_id))


if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
