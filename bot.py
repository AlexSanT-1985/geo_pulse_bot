import asyncio
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import httpx

logging.basicConfig(level=logging.INFO)

TOKEN = "your_bot_token_here"

# --- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π ---
NEWS_SOURCES = {
    "oil": "https://oilprice.com/rss/main",
    "middle_east": "https://www.aljazeera.com/xml/rss/all.xml",
    "markets": "https://www.investing.com/rss/news_285.rss",
}

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ---
KEYWORDS = [
    "houthi", "hezbollah", "israel", "iran", "red sea", "gaza",
    "opec", "strait of hormuz", "suez", "missile", "airstrike",
    "crude", "sanction", "gold", "dollar index", "dxy",
    "inflation", "pln", "eur", "usd"
]

async def fetch_news_summary():
    import feedparser
    summary = []

    for name, url in NEWS_SOURCES.items():
        feed = feedparser.parse(url)
        for entry in feed.entries[:10]:
            title = entry.title.lower()
            if any(keyword in title for keyword in KEYWORDS):
                summary.append(f"‚Ä¢ {entry.title.strip()}")

    if not summary:
        return "–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–µ–º–∞–º."

    return "\n".join(summary[:20])

async def send_briefing(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data["chat_id"]
    logging.info("‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏")
    try:
        summary = await fetch_news_summary()
        today = datetime.now().strftime("%d.%m.%Y")
        message = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ ({today}):\n\n{summary}"
        await context.bot.send_message(chat_id=chat_id, text=message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ UTC –ø—Ä–∏—Å—ã–ª–∞—é —Å–≤–æ–¥–∫—É –ø–æ –Ω–µ—Ñ—Ç–∏, –ë–ª–∏–∂–Ω–µ–º—É –í–æ—Å—Ç–æ–∫—É –∏ –≤–∞–ª—é—Ç–∞–º.")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª: {update.effective_chat.id}")

async def briefing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    summary = await fetch_news_summary()
    today = datetime.now().strftime("%d.%m.%Y")
    await update.message.reply_text(f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ ({today}):\n\n{summary}")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("briefing", briefing))

    # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ /start
    async def schedule_job(application):
        await asyncio.sleep(2)  # –¥–∞–µ–º –±–æ—Ç—É —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å
        # –≤—Ä—É—á–Ω—É—é –≤—Å—Ç–∞–≤—å chat_id –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ /start –∏–ª–∏ /briefing
        chat_id = your_chat_id_here  # ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –ß–ò–°–õ–û
        scheduler = AsyncIOScheduler()
        scheduler.add_job(
            send_briefing,
            CronTrigger(hour=9, minute=0),
            kwargs={"context": {"chat_id": chat_id}},
        )
        scheduler.start()

    asyncio.create_task(schedule_job(app))
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
